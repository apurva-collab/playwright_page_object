
import { test, expect } from '@playwright/test'
import { Loginpage } from '../pages/exercise'
import * as dotenv from 'dotenv'
import { resolve } from 'path'
dotenv.config({ path: resolve(__dirname, '../.env') })

test('Test Case 1: Login with valid credentials', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
})
test('Test Case 2: Login with invalid credentials', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.USERNAME_AUTOMATION_EXERCISE_LOGIN!)
    await page.fill('[label="Password"]', process.env.PASSWORD! + 'abc@abc@abcccc')
    await page.getByRole('button', { name: 'Sign in' }).click()
    const toast = page.locator('text=Email/Password mismatch. Try again')
    await expect(toast).toBeVisible({ timeout: 5000 })
})
test('Test Case 3: Login with blank credentials', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await expect(page.locator('text=Email is required')).toBeVisible()
    await expect(page.locator('text=Password is required')).toBeVisible()
})
test('Test Case 4: check box tick ', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.locator('[type="checkbox"]').click()
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
})
test('Test Case 5: Logout user functionality', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="sign-out"]')
    await page.waitForURL(process.env.QUICK_TEST_BASE_URL!)
})
test('Test Case 6: Forgot password functionality with valid email address', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('link', { name: 'Forgot password?' }).click()
    await page.waitForURL(process.env.QUICK_TEST_FORGOT_PASSWORD_URL!)
    await page.waitForTimeout(5000)
    await page.fill('#email',process.env.QUICK_USERNAME!)
    await page.getByRole('button', { name: 'Forgot Password' }).click()
    await expect(page.getByText('Password reset email sent!')).toBeVisible()
    await page.getByRole('button', { name: 'Go back to login' }).click()
    await page.waitForURL(process.env.QUICK_TEST_BASE_URL!)
})
test('Test Case 7: Forgot password functionality with invalid email address', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('link', { name: 'Forgot password?' }).click()
    await page.waitForURL(process.env.QUICK_TEST_FORGOT_PASSWORD_URL!)
    await page.waitForTimeout(5000)
    await page.fill('#email',process.env.USERNAME_AUTOMATION_EXERCISE_LOGIN!)
    await page.getByRole('button', { name: 'Forgot Password' }).click()
    await expect(page.getByText('Record was not found. Try again.')).toBeVisible()
})
test('Test Case 8: Forgot password functionality with wrong email format', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('link', { name: 'Forgot password?' }).click()
    await page.waitForURL(process.env.QUICK_TEST_FORGOT_PASSWORD_URL!)
    await page.waitForTimeout(5000)
    await page.fill('#email',process.env.USERNAME!)
    await page.getByRole('button', { name: 'Forgot Password' }).click()
    await expect(page.getByText('Email is not valid')).toBeVisible()
})
test('Test Case 9: Forgot password functionality with blank email', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('link', { name: 'Forgot password?' }).click()
    await page.waitForURL(process.env.QUICK_TEST_FORGOT_PASSWORD_URL!)
    await page.getByRole('button', { name: 'Forgot Password' }).click()
    await expect(page.getByText('Email is required')).toBeVisible()
})
test('Test Case 10: SIgn up functionality', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.getByRole('link', { name: 'Sign up' }).click()
    await page.waitForURL(process.env.QUICK_TEST_SIGN_UP_URL!)
    await page.fill('#firstName',process.env.USERNAME!)
    await page.fill('#lastName',process.env.USERNAME!)
    const uniqueEmail = `a${Date.now()}@yopmail.com`
    await page.fill('#email',uniqueEmail)
    await page.fill('#org',process.env.USERNAME!)
    await page.fill('#password',process.env.QUICK_PASSWORD!+'@@@1')
    await page.fill('#cnfpassword',process.env.QUICK_PASSWORD!+'@@@1')
    await page.click('#termAndCondition')
    await page.click('#sign-up')
    await expect(page.getByText('Registration Successful!')).toBeVisible()  
    await page.getByRole('button', { name: 'OK' }).click()
    await page.waitForURL(process.env.QUICK_TEST_BASE_URL!)
})
test('Test Case 11: Search project and click on it', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.fill('#search-for-desktop-id', 'Quick Test')
    await page.waitForSelector('text=Quick Test')
    await page.click('text=Quick Test')
})
test('Test Case 12: Search project from dashboard', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.getByPlaceholder('Search for projects, milestones and test runs').fill('TEST_1')
   
})   
test('Test Case 13: Add milestone', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Milestones' }).click()
    await page.getByRole('button', { name: 'Add Milestone' }).click()
    await page.fill('#name','milestone17sept')
    await page.fill('#startDate', '17')
    await page.fill('#endDate', '18')
    await page.fill('#description','Testing Milestone')
    await page.click('#add-milestone')
   
})
test('Test Case 14: edit  milestone', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Milestones' }).click()
    const row = page.locator('tr', { hasText: 'Milestone17sept' })
    await row.locator('button').first().click()
    const milestone = `${performance.now()}`
    await page.fill('#description',milestone)
    await page.click('#edit-milestone')
    await expect(page.getByText('milestone17sept')).toBeVisible() 
})
test('Test Case 15: Hover on completed milestone', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Milestones' }).click()
    const row = page.locator('tr', { hasText: 'Milestone17sept' })
    await row.locator('td:last-child div > div > svg').hover()
})
test('Test Case 16: VErify user cannot delete milestone', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Milestones' }).click()
    const row = page.locator('tr', { hasText: 'Milestone17sept' })
    await page.locator('#test-run-list > div > table > tbody > tr:nth-child(1) > td.px-6.py-4.whitespace-nowrap.text-right.text-xs.font-normal > div > button:nth-child(2)').hover()
})
test('Test Case 17: Verify user can navigate to test cases section', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await expect(page.getByText('Add New Section/Test Case')).toBeVisible()
})
test('Test Case 18: Add section functionality in test cases section', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.click('#show-pop-up')
    const uniqueSection = `${performance.now()}`
    await page.fill('#name',uniqueSection)
    await page.click('#section-pop-up-button')
})
test('Test Case 19: Verify user cannot create sections with same name', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.click('#show-pop-up')
    const uniqueSection = `${performance.now()}`
    await page.fill('#name',uniqueSection.trim())
    await page.click('#section-pop-up-button')
    await page.click('#show-pop-up')
    await page.fill('#name',uniqueSection.trim())
    await page.click('#section-pop-up-button')
    await expect(page.getByText('This record already exists')).toBeVisible()
})
test('Test Case 20: Verify user can export selected test cases in csv', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.click('[data-cy="section-1-case-0-check"]')
    await page.locator('div.bg-gray-200 >> a svg path').first().click();
})
test('Test Case 21: Verify user can export selected test cases in pdf', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.click('[data-cy="section-1-case-0-check"]')
    await page.locator('div.mx-3 svg').click()
})
test('Test Case 22: Verify user can edit selected test case', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.click('[data-cy="section-1-case-0-check"]')
    await page.locator('div.bg-gray-200 svg').nth(2).click()
})
test('Test Case 23: Verify multiple selection in one go', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('a:has-text("Projects")')
    await page.getByRole('link', { name: 'TEST_1' }).click()
    await page.waitForTimeout(5000)
    await page.getByRole('link', { name: 'Test Cases' }).click()
    await page.getByRole('row', { name: /TEST_NEW_CASE/ }).getByRole('checkbox').check()
})
test('Test Case 24: Profile section view', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
})
test('Test Case 25: Verify update button is disabled without entering any details', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
    await page.hover('#update-profile')
})
test('Test Case 26: change profile picture', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
    await page.click('#desktop-user-photo')
    await page.setInputFiles('input[type="file"]', 'tests/Assets/1.jpeg')
    expect(page.getByText('Profile picture uploaded successfully')).toBeVisible
})
test('Test Case 27: change language of the application', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
    await page.getByLabel('Language').selectOption('es')
    await page.getByRole('button', { name: 'Update' }).click()
    await page.selectOption('[label="Idioma"]','en')
    await page.getByRole('button', { name: 'Actualizar' }).click()
})
test('Test Case 28: Verify clicking on cancel button on profile section redirects user on home page', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
    await page.getByRole('button', { name: 'Cancel' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
})
//Math.random brings any random no. between 0 and 1 eg 0.84 then it's multiplied by 26(alphabets have 26 letters) = 21.84, then mth.floor removes decimal i.e 21+97 (ascii code of 97 is a ) so 118 ascii code is v ; from charcode converts into ascii
test('Test Case 29: Update profile info', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.click('#OpenProfile')
    await page.click('[data-cy="profile"]')
    const randomUppercase = String.fromCharCode(97 + Math.floor(Math.random() * 26));
    await page.fill('#lastName',"ii" + randomUppercase)
    await page.click('#update-profile')
    console.log(randomUppercase)
})
test.only('Test Case 30:Verify when we hover on quick test icon , quick test text should be viisble ', async ({ page }) => {
    await page.goto(process.env.QUICK_TEST_BASE_URL!)
    await page.fill('[label="Email Address"]', process.env.QUICK_USERNAME!)
    await page.fill('[label="Password"]', process.env.QUICK_PASSWORD!)
    await page.getByRole('button', { name: 'Sign in' }).click()
    await page.waitForURL(process.env.QUICK_TEST_REDIRECTED_URL!)
    await page.getByRole('img', { name: 'Quick Test' }).hover()
    expect (page.getByText('Quick Test'))

})



    

